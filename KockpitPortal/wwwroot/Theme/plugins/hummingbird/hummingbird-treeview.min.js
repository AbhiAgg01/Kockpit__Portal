!function (e) { var i = !1, n = !1, t = {}, l = ""; e(document).ready(function () { var i = e(".hummingbird-treeview-converter"), n = 1, t = ""; e.each(i, function (i) { n > 1 && (t = n.toString()), n++; var l = e(this); l.hide(); var a = l.attr("data-height"), d = l.attr("data-scroll"), r = l.attr("data-id"), o = l.attr("data-boldParents"); void 0 === r && (r = ""), o = void 0 !== o; var c = '<div id="treeview_container' + t + '" class="hummingbird-treeview" style="' + (a = void 0 === a ? "" : "height: " + a + ";") + " " + (d = "true" == d ? "overflow-y:scroll;" : "") + '"><ul id="treeview' + t + r + '" class="hummingbird-base">', s = l.children("li"), h = 0, p = "", b = "", u = "", f = !0, m = ""; e.each(s, function (i, n) { var l = e(this).text(), a = /^-+/, d = l.match(a), r = e(this).next().text().match(a), c = null != d ? d[0].length : 0, s = null != r ? r[0].length : 0; (l = l.replace(a, ""), p = e(this).attr("id") ? e(this).attr("id") : "hum" + t + "_" + ++h, b = e(this).attr("data-id") ? e(this).attr("data-id") : l, c < s) && (s - c > 1 && (m = '<h4 style="color:red;">Error!</h4>The item after <span style="color:red;">' + l + " </span>has too much hyphens, i.e. it is too far intended. Note that down the tree, the items are only allowed to be intended by one instance, i.e. one hyphen more than the item before. In contrast, up the tree arbitrarily large jumps are allowed.", f = !1), u = u + '<li data-id="' + c + '">\n', u += '<i class="fa fa-plus"></i>\n', u += "<label>\n", u = o ? u + '<input id="' + p + '" data-id="' + b + '" type="checkbox" /> <b>' + l + "</b>" : u + '<input id="' + p + '" data-id="' + b + '" type="checkbox" /> ' + l, u += "</label>\n", u += "<ul>\n"); if (c == s && (u += "<li>\n", u = (u += "<label>\n") + '<input class="hummingbird-end-node" id="' + p + '" data-id="' + b + '" type="checkbox" /> ' + l, u += "</label>\n", u += "</li>\n"), c > s) { u += "<li>\n", u = (u += "<label>\n") + '<input class="hummingbird-end-node" id="' + p + '" data-id="' + b + '" type="checkbox" /> ' + l, u += "</label>\n", u += "</li>\n", u += "</ul>\n"; for (var g = c - s, k = 2; k <= g; k++)u += "</ul>\n", u += "</li>\n" } }), c += u += "</ul></div>", 1 == f ? l.after(c) : l.after(m) }) }), e.fn.hummingbird = function (i) { var t = i, a = arguments; i = e.extend({}, e.fn.hummingbird.defaults, i); return void 0 === t ? this.each(function () { if ("fa" != i.SymbolPrefix && e(this).find("i").removeClass("fa").addClass(i.SymbolPrefix), "fa-plus" != i.collapsedSymbol && e(this).find("i").removeClass("fa-plus").addClass(i.collapsedSymbol), l = i.hoverColorText2, e(this).find("label").css({ "background-color": i.hoverColorBg2, color: i.hoverColorText2 }), 1 == i.hoverItems) { var t = e(this).find("label"); "bootstrap" == i.hoverMode && t.hover(function () { 0 == e(this).children("input").prop("disabled") && e(this).addClass(i.hoverColorBootstrap) }, function () { 0 == e(this).children("input").prop("disabled") && e(this).removeClass(i.hoverColorBootstrap) }), "html" == i.hoverMode && t.hover(function () { 0 == e(this).children("input").prop("disabled") && e(this).css({ "background-color": i.hoverColorBg1, color: i.hoverColorText1 }) }, function () { 0 == e(this).children("input").prop("disabled") && e(this).css({ "background-color": i.hoverColorBg2, color: i.hoverColorText2 }) }) } (e(this).find("input:checkbox").parent("label").css({ cursor: "pointer" }), "disabled" == i.checkboxes && e(this).find("input:checkbox").hide(), "disabled" == i.checkboxesGroups) && (n = !0, e(this).find('input:checkbox:not(".hummingbird-end-node")').prop("disabled", !0).parent("label").css({ cursor: "not-allowed" })); "disabled_grayed" == i.checkboxesGroups && (n = !0, !0, e(this).find('input:checkbox:not(".hummingbird-end-node")').prop("disabled", !0).parent("label").css({ cursor: "not-allowed", color: "#c8c8c8" })); "disabled" == i.checkboxesEndNodes && e(this).find("input:checkbox.hummingbird-end-node").prop("disabled", !0).parent("label").css({ cursor: "not-allowed" }); "enabled" == i.clickGroupsToggle && (e(this).find('input:checkbox:not(".hummingbird-end-node")').prop("disabled", !0).parent("label").css({ cursor: "pointer" }), e(this).on("click", "label", function () { e(this).children("input").hasClass("hummingbird-end-node") || e(this).prev("i").trigger("click") })); !1 === i.collapseAll && e.fn.hummingbird.expandAll(e(this), i.collapsedSymbol, i.expandedSymbol); var a = new Object; i.checkDoubles && e(this).find("input:checkbox.hummingbird-end-node").each(function () { a[e(this).attr("data-id")] ? a[e(this).attr("data-id")].push(e(this).attr("id")) : a[e(this).attr("data-id")] = [e(this).attr("id")] }), e.fn.hummingbird.ThreeStateLogic(e(this), !1, a, i.checkDoubles, !0); var d = e(this); e(this).on("click", "li i." + i.collapsedSymbol, function () { if (i.singleGroupOpen >= 0) { var n = e(this).parent("li").attr("data-id"), t = i.singleGroupOpen; if (n == t) { var l = d.find("li[data-id=" + t + "]").children("label").children("input"); e.each(l, function (i, n) { d.hummingbird("collapseNode", { attr: "id", name: e(this).attr("id"), collapseChildren: !0 }) }) } } e.fn.hummingbird.expandSingle(e(this), i.collapsedSymbol, i.expandedSymbol) }), e(this).on("click", "li i." + i.expandedSymbol, function () { e.fn.hummingbird.collapseSingle(e(this), i.collapsedSymbol, i.expandedSymbol) }) }) : "checkAll" == t ? this.each(function () { e.fn.hummingbird.checkAll(e(this)) }) : "uncheckAll" == t ? this.each(function () { e.fn.hummingbird.uncheckAll(e(this)) }) : "disableNode" == t ? this.each(function () { var i = a[1].name, n = a[1].attr, t = a[1].state; if (void 0 !== a[1].disableChildren) var l = a[1].disableChildren; else l = !0; e.fn.hummingbird.disableNode(e(this), n, i, t, l) }) : "enableNode" == t ? this.each(function () { var i = a[1].name, n = a[1].attr, t = a[1].state; if (void 0 !== a[1].enableChildren) var l = a[1].enableChildren; else l = !0; e.fn.hummingbird.enableNode(e(this), n, i, t, l) }) : "checkNode" == t ? this.each(function () { var n = a[1].name, t = a[1].attr, l = a[1].expandParents; e.fn.hummingbird.checkNode(e(this), t, n), 1 == l && e.fn.hummingbird.expandNode(e(this), t, n, l, i.collapsedSymbol, i.expandedSymbol) }) : "uncheckNode" == t ? this.each(function () { var n = a[1].name, t = a[1].attr, l = a[1].collapseChildren; e.fn.hummingbird.uncheckNode(e(this), t, n), 1 == l && e.fn.hummingbird.collapseNode(e(this), t, n, l, i.collapsedSymbol, i.expandedSymbol) }) : "disableToggle" == t ? this.each(function () { var i = a[1].name, n = a[1].attr; e.fn.hummingbird.disableToggle(e(this), n, i) }) : "setNodeColor" == t ? this.each(function () { var i = a[1], n = a[2], t = a[3]; e.fn.hummingbird.setNodeColor(e(this), i, n, t) }) : "collapseAll" == t ? this.each(function () { e.fn.hummingbird.collapseAll(e(this), i.collapsedSymbol, i.expandedSymbol) }) : "expandAll" == t ? this.each(function () { e.fn.hummingbird.expandAll(e(this), i.collapsedSymbol, i.expandedSymbol) }) : "expandNode" == t ? this.each(function () { var n = a[1].name, t = a[1].attr, l = a[1].expandParents; e.fn.hummingbird.expandNode(e(this), t, n, l, i.collapsedSymbol, i.expandedSymbol) }) : "collapseNode" == t ? this.each(function () { var n = a[1].name, t = a[1].attr, l = a[1].collapseChildren; e.fn.hummingbird.collapseNode(e(this), t, n, l, i.collapsedSymbol, i.expandedSymbol) }) : "getChecked" == t ? this.each(function () { var i = a[1].list, n = a[1].onlyEndNodes; if (void 0 !== a[1].onlyParents) var t = a[1].onlyParents; else t = !0; if (void 0 !== a[1].fromThis) var l = a[1].fromThis; else l = !1; e.fn.hummingbird.getChecked(e(this), i, n, t, l) }) : "getUnchecked" == t ? this.each(function () { var i = a[1].list, n = a[1].onlyEndNodes; if (void 0 !== a[1].onlyParents) var t = a[1].onlyParents; else t = !0; if (void 0 !== a[1].fromThis) var l = a[1].fromThis; else l = !1; e.fn.hummingbird.getUnchecked(e(this), i, n, t, l) }) : "addNode" == t ? this.each(function () { var n = a[1].pos, t = a[1].anchor_attr, l = a[1].anchor_name, d = a[1].text, r = a[1].the_id, o = a[1].data_id; if (void 0 !== a[1].end_node) var c = a[1].end_node; else c = !0; if (void 0 !== a[1].children) var s = a[1].children; else s = !1; e.fn.hummingbird.addNode(e(this), n, t, l, d, r, o, c, s, i.collapsedSymbol) }) : "removeNode" == t ? this.each(function () { var i = a[1].name, n = a[1].attr; e.fn.hummingbird.removeNode(e(this), n, i) }) : "filter" == t ? this.each(function () { var i = a[1].str; if (void 0 !== a[1].box_disable) var n = a[1].box_disable; else n = !1; if (void 0 !== a[1].filterChildren) var t = a[1].filterChildren; else t = !0; if (void 0 !== a[1].onlyEndNodes) var l = a[1].onlyEndNodes; else l = !1; if (void 0 !== a[1].caseSensitive) var d = a[1].caseSensitive; else d = !1; e.fn.hummingbird.filter(e(this), i, n, d, l, t) }) : "search" == t ? this.each(function () { var n = a[1].treeview_container, t = a[1].search_input, l = a[1].search_output, d = a[1].search_button; if (void 0 !== a[1].dialog) var r = a[1].dialog; else r = ""; if (void 0 !== a[1].enter_key_1) var o = a[1].enter_key_1; else o = !0; if (void 0 !== a[1].enter_key_2) var c = a[1].enter_key_2; else c = !0; if (void 0 !== a[1].scrollOffset) var s = a[1].scrollOffset; else s = !1; if (void 0 !== a[1].onlyEndNodes) var h = a[1].onlyEndNodes; else h = !1; if (void 0 !== a[1].EnterKey) var p = a[1].EnterKey; else p = !0; e.fn.hummingbird.search(e(this), n, t, l, d, r, o, c, i.collapsedSymbol, i.expandedSymbol, s, h, p) }) : void 0 }, e.fn.hummingbird.defaults = { SymbolPrefix: "fa", expandedSymbol: "fa-minus", collapsedSymbol: "fa-plus", collapseAll: !0, checkboxes: "enabled", checkboxesGroups: "enabled", clickGroupsToggle: "disabled", checkboxesEndNodes: "enabled", checkDoubles: !1, singleGroupOpen: -1, hoverItems: !1, hoverMode: "html", hoverColorBg1: "#6c757c", hoverColorBg2: "white", hoverColorText1: "white", hoverColorText2: "#ca2525", hoverColorBootstrap: "bg-secondary text-white" }; var a = !1; e.fn.hummingbird.checkAll = function (e) { e.children("li").children("label").children("input:checkbox").prop("indeterminate", !1).prop("checked", !1).trigger("click") }, e.fn.hummingbird.uncheckAll = function (e) { var n = e.find("input:checkbox:disabled:not(.hummingbird-end-node)"); n.prop("disabled", !1), i = !0, e.children("li").children("label").children("input:checkbox").prop("indeterminate", !1).prop("checked", !0).trigger("click"), i = !1, n.prop("disabled", !0) }, e.fn.hummingbird.collapseAll = function (e, i, n) { var t = e.find("label:not(.disableToggle)"); t.siblings("ul").hide(), t.siblings("." + n).removeClass(n).addClass(i) }, e.fn.hummingbird.expandAll = function (e, i, n) { var t = e.find("label:not(.disableToggle)"); t.siblings("ul").show(), t.siblings("." + i).removeClass(i).addClass(n) }, e.fn.hummingbird.collapseSingle = function (e, i, n) { e.next("label").hasClass("disableToggle") || (e.parent("li").children("ul").hide(), e.removeClass(n).addClass(i)) }, e.fn.hummingbird.expandSingle = function (e, i, n) { e.next("label").hasClass("disableToggle") || (e.parent("li").children("ul").show(), e.removeClass(i).addClass(n)) }, e.fn.hummingbird.expandNode = function (e, i, n, t, l, a) { var d = e.find("input[" + i + "=" + n + "]"), r = d.parent("label"); r.hasClass("disableToggle") || (r.siblings("ul").show().siblings("i").removeClass(l).addClass(a), !0 === t && d.parents("ul").show().siblings("i").removeClass(l).addClass(a)) }, e.fn.hummingbird.collapseNode = function (e, i, n, t, l, a) { var d = e.find("input[" + i + "=" + n + "]"), r = d.parent("label"); if (!r.hasClass("disableToggle")) { var o = r.siblings("ul"); !0 === t ? d.parent("label").parent("li").find("ul").hide().siblings("i").removeClass(a).addClass(l) : o.hide().siblings("i").removeClass(a).addClass(l) } }, e.fn.hummingbird.checkNode = function (e, i, n) { "text" == i ? (n = n.trim(), e.find("input:checkbox:not(:checked)").prop("indeterminate", !1).parent("label:contains(" + n + ")").children("input:checkbox").trigger("click")) : "id" == i ? e.find("#" + n).prop("indeterminate", !1).trigger("click") : e.find("input:checkbox:not(:checked)[" + i + "=" + n + "]").prop("indeterminate", !1).trigger("click") }, e.fn.hummingbird.uncheckNode = function (e, i, n) { "text" == i ? (n = n.trim(), e.find("input:checkbox:checked").prop("indeterminate", !1).parent("label:contains(" + n + ")").children("input:checkbox").trigger("click")) : e.find("input:checkbox:checked[" + i + "=" + n + "]").prop("indeterminate", !1).trigger("click") }, e.fn.hummingbird.disableToggle = function (e, i, n) { if ("text" == i) { n = n.trim(); var t = e.find("label:contains(" + n + ")") } else t = e.find("input:checkbox:not(:checked)[" + i + "=" + n + "]").parent("label"); t.addClass("disableToggle") }, e.fn.hummingbird.removeNode = function (e, i, n) { "text" == i ? (n = n.trim(), e.find("input:checkbox").parent("label:contains(" + n + ")").parent("li").remove()) : e.find("input:checkbox[" + i + "=" + n + "]").parent("label").parent("li").remove() }, e.fn.hummingbird.addNode = function (i, n, t, l, a, d, r, o, c, s) { if ("text" == t) { l = l.trim(); var h = i.find("input:checkbox").parent("label:contains(" + l + ")").parent("li") } else h = i.find("input:checkbox[" + t + "=" + l + "]").parent("label").parent("li"); if (o) { var p = "hummingbird-end-node"; "before" == n && h.before('<li><label><input class="' + p + '" id="' + d + '" data-id="' + r + '" type="checkbox"> ' + a + "</label></li>"), "after" == n && h.after('<li><label><input class="' + p + '" id="' + d + '" data-id="' + r + '" type="checkbox"> ' + a + "</label></li>") } else { p = ""; var b = ""; e.each(c, function (e, i) { b = b + '<li><label><input class="hummingbird-end-node" id="' + i.id + '" data-id="' + i.data_id + '" type="checkbox"> ' + i.text + "</label></li>" }), "before" == n && h.before('<li>\n<i class="fa ' + s + '"></i>\n<label>\n<input class="' + p + '" id="' + d + '" data-id="' + r + '" type="checkbox"> ' + a + "</label>\n<ul>\n" + b + "</ul>\n</li>"), "after" == n && h.after('<li>\n<i class="fa ' + s + '"></i>\n<label>\n<input class="' + p + '" id="' + d + '" data-id="' + r + '" type="checkbox"> ' + a + "</label>\n<ul>\n" + b + "</ul>\n</li>") } }, e.fn.hummingbird.filter = function (i, n, t, l, a, d) { if (a) var r = i.find("input:checkbox.hummingbird-end-node"); else r = i.find("input:checkbox"); var o = "i"; l && (o = "g"); var c = new RegExp(n, o); e.each(r, function () { e(this).parent("label").text().match(c) && (e(this).parents("li").addClass("noFilter"), 0 == d && e(this).parent("label").parent("li").find("li").addClass("noFilter")) }), t ? i.find("li").not(".noFilter").prop("disabled", !0) : i.find("li").not(".noFilter").remove() }, e.fn.hummingbird.disableNode = function (e, i, n, t, l) { if ("text" == i) { n = n.trim(); var d = e.find("input:checkbox:not(:disabled)").parent("label:contains(" + n + ")").children("input:checkbox") } else d = e.find("input:checkbox:not(:disabled)[" + i + "=" + n + "]"); d.prop("checked", !1 === t), a = !0, d.trigger("click"), !0 === l ? d.parent("label").parent("li").find("input:checkbox").prop("disabled", !0).parent("label").css({ color: "#c8c8c8", cursor: "not-allowed", "background-color": "" }) : d.prop("disabled", !0).parent("label").css({ color: "#c8c8c8", cursor: "not-allowed" }) }, e.fn.hummingbird.enableNode = function (e, i, t, a, d) { var r = {}; if ("text" == i) { t = t.trim(); r = e.find("input:checkbox:disabled").parent("label:contains(" + t + ")").children("input:checkbox") } else r = e.find("input:checkbox:disabled[" + i + "=" + t + "]"); 0 == r.parent("label").next("ul").children("li").children("label").children("input:checkbox:not(:disabled)").length && 0 == d || (r.prop("disabled", !1).parent("label").css({ color: l, cursor: "pointer" }), 0 == n && r.parent("label").parent("li").parents("li").children("label").children("input[type='checkbox']").prop("disabled", !1).parents("label").css({ color: l, cursor: "pointer" }), !0 === d && r.parent("label").parent("li").find("input:checkbox").prop("disabled", !1).parent("label").css({ color: l, cursor: "pointer" }), r.prop("checked", !1 === a), !0, r.trigger("click")) }, e.fn.hummingbird.getChecked = function (i, n, l, a, d) { if (1 == d) if (t.hasClass("hummingbird-end-node")) var r = t.parent("label").parent("li").parent("ul").parent("li"); else r = t.parent("label").parent("li"); else r = i; 1 == l ? r.find("input:checkbox.hummingbird-end-node:checked").each(function () { n.text.push(e(this).parent("label").parent("li").text().trim()), n.id.push(e(this).attr("id")), n.dataid.push(e(this).attr("data-id")) }) : 1 == a ? r.find("input:checkbox:checked:not(.hummingbird-end-node)").each(function () { n.text.push(e(this).parent("label").parent("li").text().trim()), n.id.push(e(this).attr("id")), n.dataid.push(e(this).attr("data-id")) }) : r.find("input:checkbox:checked").each(function () { e(this).parent("label").parent("li").parent("ul").parent("li").length > 0 && (n.text.push(e(this).parent("label").parent("li").text().trim()), n.id.push(e(this).attr("id")), n.dataid.push(e(this).attr("data-id"))) }) }, e.fn.hummingbird.getUnchecked = function (i, n, t, l) { 1 == t ? i.find("input:checkbox.hummingbird-end-node:not(:checked)").each(function () { n.text.push(e(this).parent("label").parent("li").text()), n.id.push(e(this).attr("id")), n.dataid.push(e(this).attr("data-id")) }) : 1 == l ? i.find("input:checkbox:not(:checked):not(.hummingbird-end-node)").each(function () { n.text.push(e(this).parent("label").parent("li").text()), n.id.push(e(this).attr("id")), n.dataid.push(e(this).attr("data-id")) }) : i.find("input:checkbox:not(:checked)").each(function () { n.text.push(e(this).parent("label").parent("li").text()), n.id.push(e(this).attr("id")), n.dataid.push(e(this).attr("data-id")) }) }, e.fn.hummingbird.setNodeColor = function (e, i, n, t) { e.find("input:checkbox[" + i + "=" + n + "]").parent("li").css({ color: t }) }, e.fn.hummingbird.ThreeStateLogic = function (n, l, d, r, o) { n.find("input:checkbox").on("click", function (c) { t = e(this); var s = e(this).parent("label").parent("li").find("input:checkbox:not(:disabled)"), h = e(this).parent("label").parent("li").find("input:checkbox:disabled:not(.hummingbird-end-node)"), p = s.add(h), b = []; p.each(function () { b.push(e(this).attr("id")) }); var u = e(this).parent("label"); if (e(this).prop("checked")) { var f = !0, m = "input:checkbox:not(:checked)"; e(u).attr("style", "color:green"), e(u).children("span").attr("style", "color:green"), n.trigger("nodeChecked", b.join()) } else { f = !1, m = "input:checkbox:checked"; e(u).attr("style", "color:#ca2525"), e(u).children("span").attr("style", "color:#ca2525"), n.trigger("nodeUnchecked", b.join()) } p.prop("indeterminate", !1).prop("checked", f); var g = e(this).parent("label").parent().parents("li").children("label").children("input:checkbox"); if (e(g).prop("indeterminate", !0), e(g).prop("checked", !1), p.parent("label").attr("style", 1 == f ? "color:green" : "color:#ca2525"), e(this).hasClass("hummingbirdNoParent")) { var k = e(this).parent("label").parent("li").parent("ul").children("li"), v = e(k).length, x = e(k).find("input:checkbox:checked").length; v > 0 && (v === x ? e(this).parent("label").parent().parents("li").children("label").children("span").attr("style", "color:green") : x < v && x > 0 ? e(this).parent("label").parent().parents("li").children("label").children("span").attr("style", "color:blue") : 0 == x && e(this).parent("label").parent().parents("li").children("label").children("span").attr("style", "color:#ca2525")) } if (e(this).parent("label").siblings("ul").find("ul").map(function () { var i = e(this).children("li").children("label"), n = e(i).children("input:checkbox:disabled").length, t = e(i).children("input:checkbox:checked").length, l = e(i).children("input:checkbox:not(:checked)").length; n > 0 && (0 == t && e(this).siblings("label").children("input:checkbox").prop("checked", !1), 0 == l && e(this).siblings("label").children("input:checkbox").prop("checked", !0), t > 0 && l > 0 && e(this).siblings("label").children("input:checkbox").prop("checked", !1)) }), e(this).parent("label").parents("li").map(function () { var i = 0, n = e(this).siblings().addBack().children("label").children(m).length; if (o) e(this).siblings().addBack().children("label").children("input:checkbox:not(:disabled)").length; e(this).siblings().addBack().children("label").children("input:checkbox").map(function () { i += e(this).prop("indeterminate") }), i + n == 0 && (e(this).parent().parent().children("label").children("input:checkbox").prop("indeterminate", !1), e(this).parent().parent().children("label").children("input:checkbox").prop("checked", f)), o && 1 == a && (0, a = !1) }), 1 == r && 0 == i && 0 == l && (e(this).parent("label").parent("li").find("input.hummingbird-end-node[type='checkbox']").each(function () { var i = d[e(this).attr("data-id")].length; if (i > 1) { l = !0; for (var n = d[e(this).attr("data-id")], t = 0; t < i; t++)e("#" + n[t]).prop("checked") != f && e("#" + n[t]).trigger("click") } }), l = !1), o && !1 === e(this).hasClass("hummingbird-end-node")) { if (!0 === f) var y = e(this).parent("label").parent("li").find("input:checkbox:not(:checked):disabled"), C = e(this).parent("label").parent("li").find("input:checkbox:checked"); if (!1 === f) y = e(this).parent("label").parent("li").find("input:checkbox:checked:disabled"), C = e(this).parent("label").parent("li").find("input:checkbox:not(:checked)"); y.length > 0 && C.length } a = !1, !1, n.trigger("CheckUncheckDone") }) }, e.fn.hummingbird.search = function (i, n, t, l, a, d, r, o, c, s, h, p, b) { 1 == b && e(document).keyup(function (i) { 13 == i.which && r == o && e(d + " #" + a).trigger("click") }); var u = !0, f = {}; e(d + " #" + t).on("click", function (i) { e(d + " #" + l).hide() }), e(d + " #" + a).on("click", function (a) { e(d + " #" + l).show(); var r = e(d + " #" + t).val().trim(); e(d + " #" + l).empty(); var o = 0; if (1 == p) var b = ".hummingbird-end-node"; else b = ""; if (e(d + " #" + l).children("li").remove(), i.find("input:checkbox" + b).each(function () { e(this).parent().text().toUpperCase().includes(r.toUpperCase()) && (e(d + " #" + l).append('<li id="drop_' + e(this).attr("id") + '"><a href="#">' + e(this).parent().text() + "</a></li>"), o++) }), 0 == o && e(d + " #" + l).append("&nbsp; &nbsp; Nothing found"), e(d + " #" + l + " li").on("click", function (a) { a.preventDefault(), e(d + " #" + l).hide(), e(d + " #" + t).val(e(this).text()), 0 == u && (f.prop("disabled") ? f.parent("label").parent("li").css({ color: "#c8c8c8", cursor: "not-allowed" }) : f.parent("label").parent("li").css({ color: "black", cursor: "pointer" })), i.hummingbird("collapseAll"); var r = (f = i.find('input[id="' + e(this).attr("id").substring(5) + '"]')).parents("ul"); r.closest("li").children("i").removeClass(c).addClass(s), f.parent("label").parent("li").css({ color: "#f0ad4e" }), u = !1, r.show(), "body" == n ? (document.body.scrollTop = 0, document.documentElement.scrollTop = 0) : e(d + " #" + n)[0].scrollTop = 0; var o = f.position().top; o += h, "body" == n ? (document.body.scrollTop += o, document.documentElement.scrollTop += o) : e(d + " #" + n)[0].scrollTop = o }), 1 == o) { var m = e("#" + l + " li").attr("id"); e("#" + m).trigger("click") } }) } }(jQuery);